.\"
.\" ----------------------------------------------------------------------------
.\" "THE BEER-WARE LICENSE" (Revision 42):
.\" <phk@FreeBSD.org> wrote this file.  As long as you retain this notice you
.\" can do whatever you want with this stuff. If we meet some day, and you think
.\" this stuff is worth it, you can buy me a beer in return.   Poul-Henning Kamp
.\" ----------------------------------------------------------------------------
.\"
.\" $FreeBSD$
.\"
.Dd February 11, 1999
.Dt MD4 3
.Os
.Sh NAME
.Nm MD4Init ,
.Nm MD4Update ,
.Nm MD4Pad ,
.Nm MD4Final ,
.Nm MD4End ,
.Nm MD4File ,
.Nm MD4FileChunk ,
.Nm MD4Data
.Nd calculate the RSA Data Security, Inc., ``MD4'' message digest
.Sh LIBRARY
.Lb libmd
.Sh SYNOPSIS
.In sys/types.h
.In md4.h
.Ft void
.Fn MD4Init "MD4_CTX *context"
.Ft void
.Fn MD4Update "MD4_CTX *context" "const void *data" "unsigned int len"
.Ft void
.Fn MD4Pad "MD4_CTX *context"
.Ft void
.Fn MD4Final "unsigned char digest[16]" "MD4_CTX *context"
.Ft "char *"
.Fn MD4End "MD4_CTX *context" "char *buf"
.Ft "char *"
.Fn MD4File "const char *filename" "char *buf"
.Ft "char *"
.Fn MD4FileChunk "const char *filename" "char *buf" "off_t offset" "off_t length"
.Ft "char *"
.Fn MD4Data "const void *data" "unsigned int len" "char *buf"
.Sh DESCRIPTION
The MD4 functions calculate a 128-bit cryptographic checksum (digest)
for any number of input bytes.
A cryptographic checksum is a one-way
hash-function, that is, you cannot find (except by exhaustive search)
the input corresponding to a particular output.
This net result is a
.Dq fingerprint
of the input-data, which does not disclose the actual input.
.Pp
MD4 is the fastest and MD5 is somewhat slower.
MD4 has now been broken; it should only be used where necessary for
backward compatibility.
MD5 has not yet (1999-02-11) been broken, but sufficient attacks have been
made that its security is in some doubt.
The attacks on both MD4 and MD5
are both in the nature of finding
.Dq collisions
\[en]
that is, multiple
inputs which hash to the same value; it is still unlikely for an attacker
to be able to determine the exact original input given a hash value.
.Pp
The
.Fn MD4Init ,
.Fn MD4Update ,
and
.Fn MD4Final
functions are the core functions.
Allocate an
.Vt MD4_CTX ,
initialize it with
.Fn MD4Init ,
run over the data with
.Fn MD4Update ,
and finally extract the result using
.Fn MD4Final .
.Pp
The
.Fn MD4Pad
function can be used to pad message data in same way
as done by
.Fn MD4Final
without terminating calculation.
.Pp
The
.Fn MD4End
function is a wrapper for
.Fn MD4Final
which converts the return value to a 33-character
(including the terminating '\e0')
.Tn ASCII
string which represents the 128 bits in hexadecimal.
.Pp
The
.Fn MD4File
function calculates the digest of a file, and uses
.Fn MD4End
to return the result.
If the file cannot be opened, a null pointer is returned.
The
.Fn MD4FileChunk
function is similar to
.Fn MD4File ,
but it only calculates the digest over a byte-range of the file specified,
starting at
.Fa offset
and spanning
.Fa length
bytes.
If the
.Fa length
parameter is specified as 0, or more than the length of the remaining part
of the file,
.Fn MD4FileChunk
calculates the digest from
.Fa offset
to the end of file.
The
.Fn MD4Data
function calculates the digest of a chunk of data in memory, and uses
.Fn MD4End
to return the result.
.Pp
When using
.Fn MD4End ,
.Fn MD4File ,
or
.Fn MD4Data ,
the
.Fa buf
argument can be a null pointer, in which case the returned string
is allocated with
.Xr malloc 3
and subsequently must be explicitly deallocated using
.Xr free 3
after use.
If the
.Fa buf
argument is non-null it must point to at least 33 characters of buffer space.
.Sh SEE ALSO
.Xr md4 3 ,
.Xr md5 3 ,
.Xr sha 3
.Rs
.%A R. Rivest
.%T The MD4 Message-Digest Algorithm
.%O RFC 1186
.Re
.Rs
.%A R. Rivest
.%T The MD5 Message-Digest Algorithm
.%O RFC 1321
.Re
.Rs
.%A H. Dobbertin
.%T Alf Swindles Ann
.%J CryptoBytes
.%N 1(3):5
.%D 1995
.Re
.Rs
.%A MJ. B. Robshaw
.%T On Recent Results for MD2, MD4 and MD5
.%J RSA Laboratories Bulletin
.%N 4
.%D November 12, 1996
.Re
.Sh HISTORY
These functions appeared in
.Fx 2.0 .
.Sh AUTHORS
The original MD4 routines were developed by
.Tn RSA
Data Security, Inc., and published in the above references.
This code is derived directly from these implementations by
.An Poul-Henning Kamp Aq Mt phk@FreeBSD.org .
.Pp
Phk ristede runen.
.Sh BUGS
No method is known to exist which finds two files having the same hash value,
nor to find a file with a specific hash value.
There is on the other hand no guarantee that such a method does not exist.
.\" $FreeBSD$
Copyright (C) 1991-2, RSA Data Security, Inc. Created 1991. All
rights reserved.
.Pp
License to copy and use this software is granted provided that it
is identified as the "RSA Data Security, Inc. MD4 Message-Digest
Algorithm" in all material mentioning or referencing this software
or this function.
License is also granted to make and use derivative works provided
that such works are identified as "derived from the RSA Data
Security, Inc. MD4 Message-Digest Algorithm" in all material
mentioning or referencing the derived work.
.Pp
RSA Data Security, Inc. makes no representations concerning either
the merchantability of this software or the suitability of this
software for any particular purpose. It is provided "as is"
without express or implied warranty of any kind.
.Pp
These notices must be retained in any copies of any part of this
documentation and/or software.
